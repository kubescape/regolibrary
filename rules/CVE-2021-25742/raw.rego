package armo_builtins

deny[msga] {
	deployment := input[_]
	deployment.kind == "Deployment"
	image := deployment.spec.template.spec.containers[i].image
	is_nginx_image(image)
	is_tag_image(image)

	# Extracting version from image tag
	tag_version_match := regex.find_all_string_submatch_n(`[0-9]+\.[0-9]+\.[0-9]+`, image, -1)[0][0]
    image_version_str_arr := split(tag_version_match,".")
	image_version_arr := [to_number(image_version_str_arr[0]),to_number(image_version_str_arr[1]),to_number(image_version_str_arr[2])]

	# Check if vulnerable
	is_vulnerable(image_version_arr, deployment.metadata.namespace)

	path := sprintf("spec.template.spec.containers[%v].image", [format_int(i, 10)])
	msga := {
			"alertMessage": sprintf("You may be vulnerable to CVE-2021-25742. Deployment %v", [deployment.metadata.name]),
			"reviewPaths": [path],
			"failedPaths": [path],
			"fixPaths":[],
			"alertObject": {"k8SApiObjects": [deployment]},
		}
}


is_nginx_image(image) {
	contains(image, "nginx-controller")
}

is_nginx_image(image) {
	contains(image, "ingress-controller")
}

is_nginx_image(image) {
	contains(image, "ingress-nginx")
}

is_allow_snippet_annotation_on(namespace) {
    configmaps := [configmap | configmap = input[_]; configmap.kind == "ConfigMap"]
	configmap_on_ingress_namespace := [configmap |  configmap= configmaps[_]; configmap.metadata.namespace == namespace]
	config_maps_with_snippet := [configmap |  configmap= configmap_on_ingress_namespace[_];  configmap.data["allow-snippet-annotations"] == "false"]
	count(config_maps_with_snippet) < 1
}

is_vulnerable(image_version, namespace) {
	image_version[0] == 0
	image_version[1] < 49
	is_allow_snippet_annotation_on(namespace)
}

is_vulnerable(image_version, namespace) {
	image_version[0] == 0
	image_version[1] == 49
	image_version[2] == 0
	is_allow_snippet_annotation_on(namespace)
}

is_vulnerable(image_version, namespace) {
	image_version[0] == 1
	image_version[1] == 0
	image_version[2] == 0
	is_allow_snippet_annotation_on(namespace)
}

is_tag_image(image) {
    reg := ":[\\w][\\w.-]{0,127}(\/)?"
    version := regex.find_all_string_submatch_n(reg, image, -1)
    v := version[_]
    img := v[_]
    not endswith(img, "/")
}