package armo_builtins

import data.cautils

deny[msga] {

	# get pod and imageVulnerabilities
	pods := [pod | pod= input[_]; pod.kind == "Pod"]
    vulns := [vuln | vuln = input[_]; vuln.kind == "ImageVulnerabilities"]
    pod := pods[_]
    vuln := vulns[_]

	# get container image name
	container := pod.spec.containers[i]

	# image has vulnerabilities
	container.image == vuln.metadata.name

	path := sprintf("spec.containers[%v].image", [format_int(i, 10)])

	metadata = {
		"name": pod.metadata.name,
		"namespace": pod.metadata.namespace
	}
	attackvector = {
		"apiVersion": "result.vulnscan.com/v1",
		"kind": pod.kind,
		"metadata": metadata,
		"relatedObjects": [pod, vuln]
	}

    msga := {
        "alertMessage": sprintf("image %v has critical vulnerabilities", [container.image]),
        "alertScore": 5,
		"failedPaths": [path],
        "packagename": "armo_builtins",
        "alertObject": {
			"externalObjects": attackvector
		}
    }
}


#handles majority of workload resources
deny[msga] {

    # get pod and imageVulnerabilities
	spec_template_spec_patterns := {"Deployment","ReplicaSet","DaemonSet","StatefulSet","Job"}

	wls := [wl | wl= input[_]; spec_template_spec_patterns[wl.kind]]
    vulns := [vuln | vuln = input[_]; vuln.kind == "ImageVulnerabilities"]
    wl := wls[_]
    vuln := vulns[_]

	# get container image name
	container := wl.spec.template.spec.containers[i]

	# image has vulnerabilities
	container.image == vuln.metadata.name

	path := sprintf("spec.template.spec.containers[%v].image", [format_int(i, 10)])

	metadata = {
		"name": wl.metadata.name,
		"namespace": wl.metadata.namespace
	}
	attackvector = {
		"apiVersion": "result.vulnscan.com/v1",
		"kind": wl.kind,
		"metadata": metadata,
		"relatedObjects": [wl, vuln]
	}

    msga := {
        "alertMessage": sprintf("image %v has critical vulnerabilities", [container.image]),
        "alertScore": 5,
		"failedPaths": [path],
        "packagename": "armo_builtins",
        "alertObject": {
			"externalObjects": attackvector
		}
    }
}

# handles cronjob
deny[msga] {

	wls := [wl | wl= input[_]; wl.kind == "CronJob"]
    vulns := [vuln | vuln = input[_]; vuln.kind == "ImageVulnerabilities"]
    wl := wls[_]
    vuln := vulns[_]

	# get container image name
	container := wl.spec.jobTemplate.spec.template.spec.containers[i]

	# image has vulnerabilities
	container.image == vuln.metadata.name

	path := sprintf("spec.jobTemplate.spec.template.spec.containers[%v].image", [format_int(i, 10)])

	metadata = {
		"name": wl.metadata.name,
		"namespace": wl.metadata.namespace
	}
	attackvector = {
		"apiVersion": "result.vulnscan.com/v1",
		"kind": wl.kind,
		"metadata": metadata,
		"relatedObjects": [wl, vuln]
	}

    msga := {
        "alertMessage": sprintf("image %v has critical vulnerabilities", [container.image]),
        "alertScore": 5,
		"failedPaths": [path],
        "packagename": "armo_builtins",
        "alertObject": {
			"externalObjects": attackvector
		}
    }
}