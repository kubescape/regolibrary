{
    "name": "cis-eks-t1.2.0",
    "description": "Testing CIS for Amazon Elastic Kubernetes Service (EKS) as suggested by CIS benchmark: https://workbench.cisecurity.org/benchmarks/9681",
    "attributes": {
        "version": "v1.2.0",
        "armoBuiltin": true
    },
    "activeControls": [
        {
            "controlID": "C-0185",
            "patch": {
                "name": "CIS-4.1.1 Ensure that the cluster-admin role is only used where required",
                "manual_test": "Obtain a list of the principals who have access to the `cluster-admin` role by reviewing the `clusterrolebinding` output for each role binding that has access to the `cluster-admin` role.\n\n kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[\\*].name\n\n Review each principal listed and ensure that `cluster-admin` privilege is required for it.",
                "references": [
                    "https://kubernetes.io/docs/admin/authorization/rbac/#user-facing-roles"
                ]
            }
        },
        {
            "controlID": "C-0186",
            "patch": {
                "name": "CIS-4.1.2 Minimize access to secrets",
                "references": [],
                "default_value": "By default, the following list of principals have `get` privileges on `secret` objects\n\n \n```\nCLUSTERROLEBINDING                                    SUBJECT                             TYPE            SA-NAMESPACE\ncluster-admin                                         system:masters                      Group           \nsystem:controller:clusterrole-aggregation-controller  clusterrole-aggregation-controller  ServiceAccount  kube-system\nsystem:controller:expand-controller                   expand-controller                   ServiceAccount  kube-system\nsystem:controller:generic-garbage-collector           generic-garbage-collector           ServiceAccount  kube-system\nsystem:controller:namespace-controller                namespace-controller                ServiceAccount  kube-system\nsystem:controller:persistent-volume-binder            persistent-volume-binder            ServiceAccount  kube-system\nsystem:kube-controller-manager                        system:kube-controller-manager      User \n\n```"
            }
        },
        {
            "controlID": "C-0187",
            "patch": {
                "name": "CIS-4.1.3 Minimize wildcard use in Roles and ClusterRoles",
                "references": []
            }
        },
        {
            "controlID": "C-0188",
            "patch": {
                "name": "CIS-4.1.4 Minimize access to create pods",
                "references": [],
                "default_value": "By default, the following list of principals have `create` privileges on `pod` objects\n\n \n```\nCLUSTERROLEBINDING                                    SUBJECT                             TYPE            SA-NAMESPACE\ncluster-admin                                         system:masters                      Group           \nsystem:controller:clusterrole-aggregation-controller  clusterrole-aggregation-controller  ServiceAccount  kube-system\nsystem:controller:daemon-set-controller               daemon-set-controller               ServiceAccount  kube-system\nsystem:controller:job-controller                      job-controller                      ServiceAccount  kube-system\nsystem:controller:persistent-volume-binder            persistent-volume-binder            ServiceAccount  kube-system\nsystem:controller:replicaset-controller               replicaset-controller               ServiceAccount  kube-system\nsystem:controller:replication-controller              replication-controller              ServiceAccount  kube-system\nsystem:controller:statefulset-controller              statefulset-controller              ServiceAccount  kube-system\n\n```"
            }
        },
        {
            "controlID": "C-0189",
            "patch": {
                "name": "Ensure that default service accounts are not actively used.",
                "remediation": "Create explicit service accounts wherever a Kubernetes workload requires specific access to the Kubernetes API server.\n\n Modify the configuration of each default service account to include this value\n\n \n```\nautomountServiceAccountToken: false\n\n```\n Automatic remediation for the default account:\n\n `kubectl patch serviceaccount default -p $'automountServiceAccountToken: false'`",
                "references": [
                    "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/",
                    "https://aws.github.io/aws-eks-best-practices/iam/#disable-auto-mounting-of-service-account-tokens"
                ]
            }
        },
        {
            "controlID": "C-0190",
            "patch": {
                "name": "CIS-4.1.6 Ensure that Service Account Tokens are only mounted where necessary",
                "references": [
                    "https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/"
                ]
            }
        },
        {
            "controlID": "C-0191",
            "patch": {
                "name": "CIS-4.1.8 Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster",
                "references": [
                    "https://www.impidio.com/blog/kubernetes-rbac-security-pitfalls",
                    "https://raesene.github.io/blog/2020/12/12/Escalating_Away/",
                    "https://raesene.github.io/blog/2021/01/16/Getting-Into-A-Bind-with-Kubernetes/"
                ]
            }
        },
        {
            "controlID": "C-0207",
            "patch": {
                "name": "CIS-4.4.1 Prefer using secrets as files over secrets as environment variables",
                "references": [
                    "https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets"
                ]
            }
        },
        {
            "controlID": "C-0209",
            "patch": {
                "name": "CIS-4.6.1 Create administrative boundaries between resources using namespaces",
                "long_description": "Limiting the scope of user permissions can reduce the impact of mistakes or malicious activities. A Kubernetes namespace allows you to partition created resources into logically named groups. Resources created in one namespace can be hidden from other namespaces. By default, each resource created by a user in an Amazon EKS cluster runs in a default namespace, called `default`. You can create additional namespaces and attach resources and users to them. You can use Kubernetes Authorization plugins to create policies that segregate access to namespace resources between different users.",
                "references": [
                    "https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/"
                ],
                "default_value": "By default, Kubernetes starts with two initial namespaces:\n\n 1. `default` - The default namespace for objects with no other namespace\n2. `kube-system` - The namespace for objects created by the Kubernetes system\n3. `kube-public` - The namespace for public-readable ConfigMap\n4. `kube-node-lease` - The namespace for associated lease object for each node"
            }
        },
        {
            "controlID": "C-0212",
            "patch": {
                "name": "CIS-4.6.3 The default namespace should not be used",
                "references": []
            }
        },
        {
            "controlID": "C-0213",
            "patch": {
                "name": "CIS-4.2.1 Minimize the admission of privileged containers"
            }
        },
        {
            "controlID": "C-0214",
            "patch": {
                "name": "CIS-4.2.2 Minimize the admission of containers wishing to share the host process ID namespace"
            }
        },
        {
            "controlID": "C-0215",
            "patch": {
                "name": "CIS-4.2.3 Minimize the admission of containers wishing to share the host IPC namespace"
            }
        },
        {
            "controlID": "C-0216",
            "patch": {
                "name": "CIS-4.2.4 Minimize the admission of containers wishing to share the host network namespace"
            }
        },
        {
            "controlID": "C-0217",
            "patch": {
                "name": "CIS-4.2.5 Minimize the admission of containers with allowPrivilegeEscalation"
            }
        },
        {
            "controlID": "C-0218",
            "patch": {
                "name": "CIS-4.2.6 Minimize the admission of root containers"
            }
        },
        {
            "controlID": "C-0219",
            "patch": {
                "name": "CIS-4.2.7 Minimize the admission of containers with added capabilities"
            }
        },
        {
            "controlID": "C-0220",
            "patch": {
                "name": "CIS-4.2.8 Minimize the admission of containers with capabilities assigned"
            }
        },
        {
            "controlID": "C-0067",
            "patch": {
                "name": "CIS-2.1.1 Enable audit Logs",
                "description": "Control plane logs provide visibility into operation of the EKS Control plane component systems. The API server audit logs record all accepted and rejected requests in the cluster. When enabled via EKS configuration the control plane logs for a cluster are exported to a CloudWatch Log Group for persistence.",
                "long_description": "Audit logs enable visibility into all API server requests from authentic and anonymous sources. Stored log data can be analyzed manually or with tools to identify and understand anomalous or negative activity and lead to intelligent remediations.",
                "remediation": "**From Console:**\n\n 1. For each EKS Cluster in each region;\n2. Go to 'Amazon EKS' > 'Clusters' > '' > 'Configuration' > 'Logging'.\n3. Click 'Manage logging'.\n4. Ensure that all options are toggled to 'Enabled'.\n\n \n```\nAPI server: Enabled\nAudit: Enabled\t\nAuthenticator: Enabled\nController manager: Enabled\nScheduler: Enabled\n\n```\n 5. Click 'Save Changes'.\n\n **From CLI:**\n\n \n```\n# For each EKS Cluster in each region;\naws eks update-cluster-config \\\n    --region '${REGION_CODE}' \\\n    --name '${CLUSTER_NAME}' \\\n    --logging '{\"clusterLogging\":[{\"types\":[\"api\",\"audit\",\"authenticator\",\"controllerManager\",\"scheduler\"],\"enabled\":true}]}'\n\n```"
            }
        },
        {
            "controlID": "C-0227",
            "patch": {
                "name": "CIS-5.4.1 Restrict Access to the Control Plane Endpoint"
            }
        },
        {
            "controlID": "C-0228",
            "patch": {
                "name": "CIS-5.4.2 Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled"
            }
        },
        {
            "controlID": "C-0229",
            "patch": {
                "name": "CIS-5.4.3 Ensure clusters are created with Private Nodes"
            }
        },
        {
            "controlID": "C-0206",
            "patch": {
                "name": "CIS-4.3.2 Ensure that all Namespaces have Network Policies defined",
                "long_description": "Running different applications on the same Kubernetes cluster creates a risk of one compromised application attacking a neighboring application. Network segmentation is important to ensure that containers can communicate only with those they are supposed to. A network policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.\n\n Once there is any Network Policy in a namespace selecting a particular pod, that pod will reject any connections that are not allowed by any Network Policy. Other pods in the namespace that are not selected by any Network Policy will continue to accept all traffic\"",
                "manual_test": "Run the below command and review the `NetworkPolicy` objects created in the cluster.\n\n \n```\nkubectl get networkpolicy --all-namespaces\n\n```\n Ensure that each namespace defined in the cluster has at least one Network Policy.",
                "references": [
                    "https://kubernetes.io/docs/concepts/services-networking/networkpolicies/",
                    "https://octetz.com/posts/k8s-network-policy-apis",
                    "https://kubernetes.io/docs/tasks/configure-pod-container/declare-network-policy/"
                ],
                "impact_statement": "Once there is any Network Policy in a namespace selecting a particular pod, that pod will reject any connections that are not allowed by any Network Policy. Other pods in the namespace that are not selected by any Network Policy will continue to accept all traffic\""
            }
        },
        {
            "controlID": "C-0205",
            "patch": {
                "name": "CIS-4.3.1 Ensure CNI plugin supports network policies.",
                "remediation": "As with RBAC policies, network policies should adhere to the policy of least privileged access. Start by creating a deny all policy that restricts all inbound and outbound traffic from a namespace or create a global policy using Calico.",
                "manual_test": "Review the documentation of CNI plugin in use by the cluster, and confirm that it supports network policies.",
                "references": [
                    "https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/",
                    "https://aws.github.io/aws-eks-best-practices/network/"
                ],
                "impact_statement": "None."
            }
        },
        {
            "controlID": "C-0230",
            "patch": {
                "name": "CIS-5.4.4 Ensure Network Policy is Enabled and set as appropriate"
            }
        }
    ],
    "subSections": {
        "2": {
            "name": "Control Plane Configuration",
            "id": "2",
            "subSections": {
                "1": {
                    "name": "Logging",
                    "id": "2.1",
                    "controlsIDs": [
                        "CIS-2.1.1"
                    ]
                }
            }
        },
        "3": {
            "name": "Worker Nodes",
            "id": "3",
            "subSections": {
                "1": {
                    "name": "Worker Node Configuration Files",
                    "id": "3.1",
                    "controlsIDs": [
                        "CIS-3.1.1",
                        "CIS-3.1.2",
                        "CIS-3.1.3",
                        "CIS-3.1.4"
                    ]
                },
                "2": {
                    "name": "Kubelet",
                    "id": "3.2",
                    "controlsIDs": [
                        "CIS-3.2.1",
                        "CIS-3.2.2",
                        "CIS-3.2.3",
                        "CIS-3.2.4",
                        "CIS-3.2.5",
                        "CIS-3.2.6",
                        "CIS-3.2.7",
                        "CIS-3.2.8",
                        "CIS-3.2.9",
                        "CIS-3.2.10",
                        "CIS-3.2.11"
                    ]
                },
                "3": {
                    "name": "Container Optimized OS",
                    "id": "3.3",
                    "controlsIDs": [
                        "CIS-3.3.1"
                    ]
                }
            }
        },
        "4": {
            "name": "Policies",
            "id": "4",
            "subSections": {
                "1": {
                    "name": "RBAC and Service Accounts",
                    "id": "4.1",
                    "controlsIDs": [
                        "CIS-4.1.1",
                        "CIS-4.1.2",
                        "CIS-4.1.3",
                        "CIS-4.1.4",
                        "CIS-4.1.5",
                        "CIS-4.1.6",
                        "CIS-4.1.7",
                        "CIS-4.1.8"
                    ]
                },
                "2": {
                    "name": "Pod Security Policies",
                    "id": "4.2",
                    "controlsIDs": [
                        "CIS-4.2.1",
                        "CIS-4.2.2",
                        "CIS-4.2.3",
                        "CIS-4.2.4",
                        "CIS-4.2.5",
                        "CIS-4.2.6",
                        "CIS-4.2.7",
                        "CIS-4.2.8"
                    ]
                },
                "3": {
                    "name": "CNI Plugin",
                    "id": "4.3",
                    "controlsIDs": [
                        "CIS-4.3.1",
                        "CIS-4.3.2"
                    ]
                },
                "4": {
                    "name": "Secrets Management",
                    "id": "4.4",
                    "controlsIDs": [
                        "CIS-4.4.1",
                        "CIS-4.4.2"
                    ]
                },
                "6": {
                    "name": "General Policies",
                    "id": "4.6",
                    "controlsIDs": [
                        "CIS-4.6.1",
                        "CIS-4.6.2",
                        "CIS-4.6.3"
                    ]
                }
            }
        },
        "5": {
            "name": "Managed services",
            "id": "5",
            "subSections": {
                "1": {
                    "name": "Image Registry and Image Scanning",
                    "id": "5.1",
                    "controlsIDs": [
                        "CIS-5.1.1",
                        "CIS-5.1.2",
                        "CIS-5.1.3",
                        "CIS-5.1.4"
                    ]
                },
                "2": {
                    "name": "Identity and Access Management (IAM)",
                    "id": "5.2",
                    "controlsIDs": [
                        "CIS-5.2.1"
                    ]
                },
                "3": {
                    "name": "AWS EKS Key Management Service",
                    "id": "5.3",
                    "controlsIDs": [
                        "CIS-5.3.1"
                    ]
                },
                "4": {
                    "name": "Cluster Networking",
                    "id": "5.4",
                    "controlsIDs": [
                        "CIS-5.4.1",
                        "CIS-5.4.2",
                        "CIS-5.4.3",
                        "CIS-5.4.4",
                        "CIS-5.4.5"
                    ]
                },
                "5": {
                    "name": "Authentication and Authorization",
                    "id": "5.5",
                    "controlsIDs": [
                        "CIS-5.5.1"
                    ]
                },
                "6": {
                    "name": "Other Cluster Configurations",
                    "id": "5.6",
                    "controlsIDs": [
                        "CIS-5.6.1"
                    ]
                }
            }
        }
    }
}