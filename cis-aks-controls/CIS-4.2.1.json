{
    "controlID": "CIS-4.2.1",
    "name": "Minimize the admission of privileged containers",
    "description": "Do not generally permit containers to be run with the `securityContext.privileged` flag set to `true`.",
    "long_description": "Privileged containers have access to all Linux Kernel capabilities and devices. A container running with full privileges can do almost everything that the host can do. This flag exists to allow special use-cases, like manipulating the network stack and accessing devices.\n\n There should be at least one PodSecurityPolicy (PSP) defined which does not permit privileged containers.\n\n If you need to run privileged containers, this should be defined in a separate PSP and you should carefully check RBAC controls to ensure that only limited service accounts and users are given permission to access that PSP.",
    "remediation": "Create a PSP as described in the Kubernetes documentation, ensuring that the `.spec.privileged` field is omitted or set to `false`.",
    "manual_test": "Get the set of PSPs with the following command:\n\n \n```\nkubectl get psp\n\n```\n as an alternative AZ CLI can be used:\n\n \n```\naz aks list --output yaml\n\n```\n For each PSP, check whether privileged is enabled:\n\n \n```\nkubectl get psp -o json\n\n```\n Verify that there is at least one PSP which does not return `true`.\n\n `kubectl get psp <name> -o=jsonpath='{.spec.privileged}'`",
    "references": [
        "<https://docs.microsoft.com/security/benchmark/azure/security-controls-v2-governance-strategy#gs-2-define-enterprise-segmentation-strategy>"
    ],
    "attributes": {
        "armoBuiltin": true
    },
    "rulesNames": [],
    "baseScore": 0,
    "impact_statement": "Pods defined with `spec.containers[].securityContext.privileged: true` will not be permitted.",
    "default_value": "By default, when you provision an AKS cluster, the value of \"enablePodSecurityPolicy\" is null."
}