{
    "name": "Container hostPort",
    "attributes": {
        "armoBuiltin": true,
        "controlTypeTags": [
            "security",
            "compliance",
            "devops"
        ],
        "attackTracks": [
            {
                "attackTrack": "container",
                "categories": [
                    "Initial access"
                ]
            }
        ]
    },
    "description": "Configuring hostPort requires a particular port number. If two objects specify the same HostPort, they could not be deployed to the same node. It may prevent the second object from starting, even if Kubernetes will try reschedule it on another node, provided there are available nodes with sufficient amount of resources. Also, if the number of replicas of such workload is higher than the number of nodes, the deployment will consistently fail.",
    "remediation": "Avoid usage of hostPort unless it is absolutely necessary, in which case define appropriate exception. Use NodePort / ClusterIP instead.",
    "rulesNames": [
        "container-hostPort"
    ],
    "long_description": "Workloads (like pod, deployment, etc) that contain a container with hostport. The problem that arises is that if the scale of your workload is larger than the number of nodes in your Kubernetes cluster, the deployment fails. And any two workloads that specify the same HostPort cannot be deployed to the same node. In addition, if the host where your pods are running becomes unavailable, Kubernetes reschedules the pods to different nodes. Thus, if the IP address for your workload changes, external clients of your application will lose access to the pod. The same thing happens when you restart your pods \u2014 Kubernetes reschedules them to a different node if available.\u00a0",
    "test": "Check for each workload (with container) if it exists inside the container hostPort.\u00a0\u00a0",
    "controlID": "C-0044",
    "baseScore": 4.0,
    "example": "@controls/examples/c044.yaml"
}