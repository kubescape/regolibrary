{
  "name": "Privileged container",
  "attributes": {
    "armoBuiltin": true,
    "microsoftMitreColumns": [
      "Privilege escalation"
    ],
    "controlTypeTags": [
      "security"
    ],
    "attackTracks": [
      {
        "attackTrack": "container",
        "categories": [
          "Privilege escalation"
        ]
      }
    ]
  },
  "description": "Potential attackers may gain access to privileged containers and inherit access to the host resources. Therefore, it is not recommended to deploy privileged containers unless it is absolutely necessary. This control identifies all the privileged Pods.",
  "example": "apiVersion: v1kind: Podmetadata:  name: privilegedspec:  containers:    - name: pause      image: k8s.gcr.io/pause      securityContext:          privileged: true # This field triggers failure!",
  "remediation": "Remove privileged capabilities by setting the securityContext.privileged to false. If you must deploy a Pod as privileged, add other restriction to it, such as network policy, Seccomp etc and still remove all unnecessary capabilities. Use the exception mechanism to remove unnecessary notifications.",
  "rulesNames": [
    "rule-privilege-escalation"
  ],
  "long_description": "A privileged container is a container that has all the capabilities of the host machine, which lifts all the limitations regular containers have. Practically, this means that privileged containers can do almost every action that can be performed directly on the host. Attackers who gain access to a privileged container or have permissions to create a new privileged container (by using the compromised pod’s service account, for example), can get access to the host’s resources.",
  "test": "Check in POD spec if securityContext.privileged == true, if so raise an alert.",
  "controlID": "C-0057",
  "baseScore": 8,
  "scanningScope": {
    "matches": [
      [
        "cluster"
      ],
      [
        "file"
      ]
    ]
  }
}
