{
    "name": "Access container service account",
    "attributes": {
        "armoBuiltin": true,
        "microsoftMitreColumns": [
            "Credential access"
        ],
        "rbacQuery": "Container service account mapping",
        "controlTypeTags": [
            "compliance",
            "security-impact"
        ]
    },
    "description": "Attackers who obtain access to a pod can use its SA token to communicate with KubeAPI server. All pods with SA token mounted (if such token has a Role or a ClusterRole binding) are considerred potentially dangerous.",
    "remediation": "Verify that RBAC is enabled. Follow the least privilege principle and ensure that only necessary pods have SA token mounted into them.",
    "rulesNames": [
        "access-container-service-account",
        "access-container-service-account-v1"
    ],
    "long_description": "Service account (SA) represents an application identity in Kubernetes. By default, an SA is mounted to every created pod in the cluster. Using the SA, containers in the pod can send requests to the Kubernetes API server. Attackers who get access to a pod can access the SA token (located in /var/run/secrets/kubernetes.io/serviceaccount/token) and perform actions in the cluster, according to the SA permissions. If RBAC is not enabled, the SA has unlimited permissions in the cluster. If RBAC is enabled, its permissions are determined by the RoleBindings\\\\ClusterRoleBindings that are associated with it.",
    "test": "Control checks if RBAC is enabled. If it's not, the SA has unlimited permissions. If RBAC is enabled, it lists  all permissions for each SA.",
    "controlID": "C-0053",
    "baseScore": 6.0,
    "category": {
        "name" : "Access control"
   },
    "scanningScope": {
        "matches": [
            "cluster",
            "file"
        ]
    }
}