{
    "id": "CIS-4.1.7",
    "controlID": "C-0285",
    "name": "Cluster Access Manager API to streamline and enhance the management of access controls within EKS clusters",
    "description": "Amazon EKS has introduced the Cluster Access Manager API to streamline and enhance the management of access controls within EKS clusters. This new approach is now the recommended method over the traditional `aws-auth` ConfigMap for managing Role-Based Access Control (RBAC) and Service Accounts.\n\n Key Advantages of Using the Cluster Access Manager API:\n\n 1. **Simplified Access Management:** The Cluster Access Manager API allows administrators to manage access directly through the Amazon EKS API, eliminating the need to modify the aws-auth ConfigMap manually. This reduces operational overhead and minimizes the risk of misconfigurations.\n2. **Enhanced Security Controls:** With this API, administrators can assign predefined AWS-managed Kubernetes permissions, known as \"access policies,\" to IAM principals. This provides a more secure and auditable way to manage permissions compared to manual ConfigMap edits.\n3. **Improved Visibility and Auditing:** The API offers better visibility into cluster access configurations, facilitating easier auditing and compliance checks. Administrators can list and describe access entries and policies directly through the EKS API.",
    "long_description": "The compelling rationale for using the Cluster Access Manager API instead of the traditional aws-auth ConfigMap in Amazon EKS revolves around security, scalability, operational efficiency, and simplified management.\n\n **1. Increased Security and Reduced Risk**\n\n * Direct Management via API: The Cluster Access Manager API enables you to manage RBAC and IAM permissions directly through the EKS API rather than editing a ConfigMap. This eliminates the risk of inadvertent errors when manually modifying the `aws-auth` ConfigMap.\n* Immutable Access Entries: The API ensures that once access entries are defined, they are tightly controlled, reducing the risk of accidental overwrites or misconfigurations that can happen when editing YAML files.\n* Fine-Grained Access Control: By leveraging the new API, you can define access policies at a more granular level than the previous method. This ensures that only the necessary permissions are granted, minimizing the attack surface.\n\n **2. Operational Efficiency and Scalability**\n\n * Scalability: Managing access control through the aws-auth ConfigMap becomes increasingly challenging as the number of users and services grows. The new API scales better by allowing access management through standard AWS Identity and Access Management (IAM) tools.\n* Reduced Operational Overhead: The API simplifies the management of access controls by removing the need for manual updates to the ConfigMap, reducing the risk of human error, and automating access provisioning through Infrastructure as Code (IaC) tools like Terraform or CloudFormation.\n\n **3. Improved Visibility, Auditing, and Compliance**\n\n * Auditable and Traceable Changes: The Cluster Access Manager API integrates with AWS CloudTrail, allowing you to track who made changes to access configurations. This level of visibility is critical for organizations that need to adhere to compliance frameworks like SOC 2, GDPR, or HIPAA.\n* Centralized Management: Unlike the `aws-auth` ConfigMap, which is managed at the Kubernetes level, the new API leverages AWS IAM\u2019s centralized management and auditing capabilities, providing a unified view of access controls across your AWS environment.\n\n **4. Faster and Safer Access Provisioning**\n\n * No More Cluster Downtime: Errors in the aws-auth ConfigMap can accidentally lock out users or admins from the cluster, requiring complex recovery processes. The API-based approach is more resilient, reducing the risk of misconfigurations causing downtime.\n* Immediate Effect: Changes made via the API take effect immediately, whereas updates to the aws-auth ConfigMap may require a delay or even restarting components in some cases.\n\n **5. Future-Proofing and Alignment with AWS Best Practices**\n\n * Native Support in Kubernetes Versions: Starting from Kubernetes 1.23, the Cluster Access Manager API is fully supported and designed to replace the aws-auth ConfigMap method. This aligns with AWS\u2019s roadmap and best practices for EKS, ensuring your infrastructure remains compatible with future updates.\n* Modern Approach for Pod Identity: When combined with IAM Roles for Service Accounts (IRSA) or the new Pod Identity feature, the API supports a more dynamic and secure model for assigning permissions to pods, making it easier to implement least-privilege access.",
    "remediation": "Log in to the AWS Management Console.\n\n Navigate to Amazon EKS and select your EKS cluster.\n\n Go to the Access tab and click on \"Manage Access\" in the \"Access Configuration section\".\n\n Under Cluster Authentication Mode for Cluster Access settings.\n\n * Click `EKS API` to change `cluster will source authenticated IAM principals only from EKS access entry APIs`.\n* Click `ConfigMap` to change `cluster will source authenticated IAM principals only from the aws-auth ConfigMap`.\n* Note: `EKS API and ConfigMap` must be selected during Cluster creation and cannot be changed once the Cluster is provisioned.",
    "manual_test": "To check if the Cluster Access Manager API is active on your Amazon EKS cluster, you can use the following AWS CLI command:\n\n `aws eks describe-cluster --name $CLUSTER_NAME --query \"cluster.accessConfig\" --output json`\n\n Replace $CLUSTER\\_NAME with the name of your EKS cluster.\n\n The command queries the `cluster.accessConfig` property, which indicates the authentication mode of the cluster.\n\n Possible Outputs:\nIf the output shows `\"authenticationmode\": \"API\" or \"authenticationmode\": \"API_AND_CONFIG_MAP\"`, it means the Cluster Access Manager API is enabled.\n\n If it only shows `\"authenticationmode\": \"CONFIG_MAP\"`, then the cluster is still using the traditional `aws-auth` ConfigMap approach.",
    "references": [
        "https://workbench.cisecurity.org/sections/3151603/recommendations/5148193"
    ],
    "attributes": {
        "armoBuiltin": true
    },
    "rulesNames": ["cluster-access-manager-api-eks"],
    "baseScore": 5,
    "impact_statement": "The shift to using the **Cluster Access Manager API** instead of the aws-auth ConfigMap impacts EKS RBAC and Service Accounts by simplifying access control management, reducing the risk of misconfigurations, and enhancing security. It allows for more granular, direct management of IAM permissions and Kubernetes roles, eliminating manual ConfigMap edits and reducing operational overhead. For Service Accounts, it better integrates with existing mechanisms like IAM Roles for Service Accounts (IRSA) for secure pod access to AWS resources, making it easier to enforce least-privilege principles. This transition improves scalability, auditing, and compliance, while providing a future-proof solution aligned with AWS\u2019s Kubernetes identity management roadmap.",
    "default_value": "`EKS API` is selected by default during EKS Cluster creation but can be changed during initial configuration",
    "category": {
        "name": "Control plane"
    },
    "scanningScope": {
        "matches": [
            "cluster"
        ]
    }
}